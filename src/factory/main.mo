import Nat         "mo:base/Nat";
import Principal   "mo:base/Principal";
import Blob        "mo:base/Blob";
import Time        "mo:base/Time";
import Array       "mo:base/Array";
import Debug       "mo:base/Debug";
import Cycles      "mo:base/ExperimentalCycles";
import WasmBytes   "wasm_bytes"; // generated by embed script

actor TokenFactory {

  // --- Embedded WASM (from generated module file) ---
  let TOKEN_WASM : Blob = Blob.fromArray(WasmBytes.array);

  // -------- Management canister (minimal interface) --------
  type ICManagement = actor {
    create_canister : ({ settings : ?{
      controllers : ?[Principal];
    }}) -> async { canister_id : Principal };

    install_code : ({
      mode : { #install; #reinstall; #upgrade };
      canister_id : Principal;
      wasm_module : Blob;
      arg : Blob
    }) -> async ();
  };
  let ic : ICManagement = actor ("aaaaa-aa");

  // -------- Shared types (must match token actor args) --------
  type Allocation = { owner : Principal; allocation : Nat };

  type VestingSchedule = {
    vesting_period_days : Nat;
    start_date          : Time.Time;
  };

  type TokenInitArgs = {
    token_name       : Text;
    token_symbol     : Text;
    farmer_principal : Principal;
    initial_supply   : Nat;
    transfer_fee     : Nat;
    initial_allocations : [Allocation];
    reserve_amount   : Nat;
    vesting_schedule : VestingSchedule;
    governance_principal : ?Principal;
  };

  // -------- Helpers --------
  func percent(n : Nat, p : Nat) : Nat {
    (n * p) / 100;
  };

  func sumAll(xs : [Allocation]) : Nat {
    var s : Nat = 0;
    for (a in xs.vals()) { s += a.allocation };
    s
  };

  // -------- Public API: create farm token with enforced allocation & vesting args --------
  public shared ({ caller }) func createFarmToken(
    farmName        : Text,
    farmSymbol      : Text,
    farmerId        : Principal,
    initialSupply   : Nat,
    investorAllocs  : [Allocation],
    governance      : ?Principal,
    vestingDays     : Nat,
    transferFee     : Nat
  ) : async Principal {
    assert initialSupply > 0;

    // Reserve = 10% (internal)
    let reserveAmt : Nat = percent(initialSupply, 10);

    // Investors capped at 39%
    let maxInvestors : Nat = percent(initialSupply, 39);
    let investorsSum : Nat = sumAll(investorAllocs);
    if (investorsSum > maxInvestors) {
      Debug.trap("Investor allocations exceed 39% cap");
    };

    // Farmer gets remainder
    let farmerAllocation : Nat = initialSupply - reserveAmt - investorsSum;

    // enforce minimum 51% for farmer
    let minFarmer : Nat = percent(initialSupply, 51);
    if (farmerAllocation < minFarmer) {
      Debug.trap("Farmer allocation would fall below required 51%");
    };

    // compose final allocations (farmer first to make vesting logic simple)
    let finalAllocs : [Allocation] =
      Array.append<Allocation>(
        [{ owner = farmerId; allocation = farmerAllocation }],
        investorAllocs
      );

    // candid args to pass to the token actor class constructor
    let initArgs : TokenInitArgs = {
      token_name       = farmName;
      token_symbol     = farmSymbol;
      farmer_principal = farmerId;
      initial_supply   = initialSupply;
      transfer_fee     = transferFee;
      initial_allocations = finalAllocs;
      reserve_amount   = reserveAmt;
      vesting_schedule = {
        vesting_period_days = vestingDays;
        start_date          = Time.now();
      };
      governance_principal = governance;
    };

    // ✅ bump cycles for create + install
    let cyclesForCreateAndInstall : Nat = 1_000_000_000_000; // 1T cycles
    Cycles.add<system>(cyclesForCreateAndInstall);

    // ✅ Option B: make both factory and farmer controllers
    let { canister_id } = await ic.create_canister({
      settings = ?{
        controllers = ?[caller, farmerId , bcu2a-fpijb-vh2b2-mpirp-q3vc7-7feqq-ug2ne-jk3ce-656ka-twnob-xae]; // factory caller + farmer
      }
    });

    // candid-encode args and install code
    let argBlob : Blob = to_candid(initArgs);

    await ic.install_code({
      mode         = #install;
      canister_id  = canister_id;
      wasm_module  = TOKEN_WASM;
      arg          = argBlob
    });

    canister_id
  };
}
